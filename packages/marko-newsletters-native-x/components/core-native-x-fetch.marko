import { get } from "@parameter1/base-cms-object-path";
import { warn } from "@parameter1/base-cms-utils";
import { dateToTimestamp, fetchEmailAd } from "../utils";

$ const {
  uri,
  placementId,
  date,
  imageOptions,
  logoOptions,
  opts,
  req,
  debug,
} = input;
$ let mindfulTenant;
$ try {
  [, mindfulTenant] = uri.match(/^https:\/\/delivery\.mindfulcms\.com\/(\w+\/\w+)\//);
} catch (e) {
  // Explicitly throw, native native-x delivery is no longer supported.
  throw new Error(`Unable to parse mindful tenant from native ad url ${uri}`);
}

$ const timestamp = date ? dateToTimestamp(date) : undefined;

<if(uri && placementId)>
  <if(debug)>
    $ console.log(uri);
    $ console.log(placementId);
  </if>
  <marko-web-resolve|{ resolved }| promise=fetchEmailAd({
    uri,
    placementId,
    timestamp,
    imageOptions,
    logoOptions,
    opts,
    req,
    debug,
  })>
    $ const regex = /^\s+<p/;
    <if(Array.isArray(resolved.data))>
      $ const results = resolved.data.map((node) => ({
        ...node,
        ...(node.teaser && !regex.test(node.teaser) && {
          teaser: `<p>${node.teaser}</p>`,
        }),
      }));
      <${input.renderBody}
        data=results
        tenant=mindfulTenant
      />
    </if>
    <else-if(resolved.data && resolved.data.teaser && !regex.test(resolved.data.teaser))>
      $ const results = {
        data: {
          ...resolved.data,
          teaser: `<p>${resolved.data.teaser}</p>`,
        },
        tenant: mindfulTenant,
      };
      <${input.renderBody}
        data=results
        tenant=mindfulTenant
      />
    </else-if>
    <else>
      <${input.renderBody}
        data=resolved.data
        tenant=mindfulTenant
      />
    </else>

  </marko-web-resolve>
</if>
<else>
  $ warn('Unable to fetch campaign from NativeX: a uri and placement ID are required.');
</else>
